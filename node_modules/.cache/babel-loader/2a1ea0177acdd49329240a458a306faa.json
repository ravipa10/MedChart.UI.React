{"ast":null,"code":"var _jsxFileName = \"C:\\\\Pavithra_ThinkPad\\\\medchart\\\\MedChart\\\\MedChart.UI.React\\\\src\\\\Components\\\\CreateBloodPressure.Component.tsx\";\nimport React from 'react';\nimport * as toastr from 'toastr';\nimport BaseService from '../Services/Base.Service';\nimport { Form } from './Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Create extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSave = () => {\n      BaseService.create(\"/blood_pressure\", this.state.bloodPressure).then(rp => {\n        if (rp.Status) {\n          toastr.success('Blood pressure entry saved.');\n          this.setState({\n            bloodPressure: {\n              SystolicReading: 0,\n              DiabolicReading: 0,\n              HeartRate: 0,\n              ExamDate: new Date(),\n              CreatedDate: new Date(),\n              UpdatedDate: new Date()\n            }\n          });\n        } else {\n          toastr.error(rp.Messages);\n          console.log(\"Messages: \" + rp.Messages);\n          console.log(\"Exception: \" + rp.Exception);\n        }\n      });\n    };\n\n    this.state = {\n      bloodPressure: {\n        SystolicReading: 120,\n        DiabolicReading: 80,\n        HeartRate: 85,\n        ExamDate: new Date(),\n        CreatedDate: new Date(),\n        UpdatedDate: new Date()\n      }\n    };\n    this.onFieldValueChange = this.onFieldValueChange.bind(this);\n  }\n\n  onFieldValueChange(fieldName, value) {\n    const nextState = { ...this.state,\n      bloodPressure: { ...this.state.bloodPressure,\n        [fieldName]: value\n      }\n    };\n    this.setState(nextState);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      bloodPressure: this.state.bloodPressure,\n      onChange: this.onFieldValueChange,\n      onSave: this.onSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Pavithra_ThinkPad/medchart/MedChart/MedChart.UI.React/src/Components/CreateBloodPressure.Component.tsx"],"names":["React","toastr","BaseService","Form","Create","Component","constructor","props","onSave","create","state","bloodPressure","then","rp","Status","success","setState","SystolicReading","DiabolicReading","HeartRate","ExamDate","Date","CreatedDate","UpdatedDate","error","Messages","console","log","Exception","onFieldValueChange","bind","fieldName","value","nextState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,IAAT,QAAqB,QAArB;;AAqBA,eAAe,MAAMC,MAAN,SAAqBJ,KAAK,CAACK,SAA3B,CAAqD;AAChEC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACtB,UAAMA,KAAN;;AADsB,SA2BlBC,MA3BkB,GA2BT,MAAM;AACnBN,MAAAA,WAAW,CAACO,MAAZ,CAAkC,iBAAlC,EAAqD,KAAKC,KAAL,CAAWC,aAAhE,EAA+EC,IAA/E,CACKC,EAAD,IAAQ;AACJ,YAAIA,EAAE,CAACC,MAAP,EAAe;AACXb,UAAAA,MAAM,CAACc,OAAP,CAAe,6BAAf;AAGA,eAAKC,QAAL,CAAc;AACVL,YAAAA,aAAa,EAAE;AACXM,cAAAA,eAAe,EAAE,CADN;AAEXC,cAAAA,eAAe,EAAE,CAFN;AAGXC,cAAAA,SAAS,EAAE,CAHA;AAIXC,cAAAA,QAAQ,EAAE,IAAIC,IAAJ,EAJC;AAKXC,cAAAA,WAAW,EAAE,IAAID,IAAJ,EALF;AAMXE,cAAAA,WAAW,EAAE,IAAIF,IAAJ;AANF;AADL,WAAd;AAWH,SAfD,MAeO;AACHpB,UAAAA,MAAM,CAACuB,KAAP,CAAaX,EAAE,CAACY,QAAhB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAed,EAAE,CAACY,QAA9B;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBd,EAAE,CAACe,SAA/B;AACH;AACJ,OAtBL;AAyBH,KArDyB;;AAGtB,SAAKlB,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAE;AACXM,QAAAA,eAAe,EAAE,GADN;AAEXC,QAAAA,eAAe,EAAE,EAFN;AAGXC,QAAAA,SAAS,EAAE,EAHA;AAIXC,QAAAA,QAAQ,EAAE,IAAIC,IAAJ,EAJC;AAKXC,QAAAA,WAAW,EAAE,IAAID,IAAJ,EALF;AAMXE,QAAAA,WAAW,EAAE,IAAIF,IAAJ;AANF;AADN,KAAb;AAUA,SAAKQ,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACH;;AAEOD,EAAAA,kBAAkB,CAACE,SAAD,EAAoBC,KAApB,EAAmC;AACzD,UAAMC,SAAS,GAAG,EACd,GAAG,KAAKvB,KADM;AAEdC,MAAAA,aAAa,EAAE,EACX,GAAG,KAAKD,KAAL,CAAWC,aADH;AAEX,SAACoB,SAAD,GAAaC;AAFF;AAFD,KAAlB;AAQA,SAAKhB,QAAL,CAAciB,SAAd;AACH;;AA6BDC,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,IAAD;AACI,MAAA,aAAa,EAAE,KAAKxB,KAAL,CAAWC,aAD9B;AAEI,MAAA,QAAQ,EAAE,KAAKkB,kBAFnB;AAGI,MAAA,MAAM,EAAE,KAAKrB;AAHjB;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAhE+D","sourcesContent":["import React from 'react';\r\nimport * as toastr from 'toastr';\r\nimport BloodPressure from '../Models/BloodPressureModel';\r\nimport BaseService from '../Services/Base.Service';\r\nimport { Form } from './Form';\r\n \r\n\r\n\r\ninterface IProps { \r\n    // history: History;\r\n    //Map properties match\r\n    match:{ \r\n        isExact: boolean\r\n        params: {\r\n            id:string\r\n        },\r\n        path: string,\r\n        url: string,\r\n    }\r\n}\r\ninterface IState {\r\n    bloodPressure: BloodPressure\r\n}\r\n\r\n\r\nexport default class Create extends React.Component<IProps, IState> {\r\n    constructor(props:IProps) {\r\n        super(props);\r\n         \r\n        this.state = {\r\n            bloodPressure: {\r\n                SystolicReading: 120,\r\n                DiabolicReading: 80,\r\n                HeartRate: 85,\r\n                ExamDate: new Date(),\r\n                CreatedDate: new Date(),\r\n                UpdatedDate: new Date()\r\n            }\r\n        }\r\n        this.onFieldValueChange = this.onFieldValueChange.bind(this);\r\n    }\r\n\r\n    private onFieldValueChange(fieldName: string, value: string) { \r\n        const nextState = {\r\n            ...this.state,\r\n            bloodPressure: {\r\n                ...this.state.bloodPressure,\r\n                [fieldName]: value,\r\n            }\r\n        };\r\n\r\n        this.setState(nextState);\r\n    }\r\n    private onSave = () => { \r\n        BaseService.create<BloodPressure>(\"/blood_pressure\", this.state.bloodPressure).then(\r\n            (rp) => {\r\n                if (rp.Status) {\r\n                    toastr.success('Blood pressure entry saved.'); \r\n\r\n\r\n                    this.setState({\r\n                        bloodPressure: {\r\n                            SystolicReading: 0,\r\n                            DiabolicReading: 0,\r\n                            HeartRate: 0,\r\n                            ExamDate: new Date(),\r\n                            CreatedDate: new Date(),\r\n                            UpdatedDate: new Date()\r\n                        }\r\n                    });\r\n                     \r\n                } else {\r\n                    toastr.error(rp.Messages);\r\n                    console.log(\"Messages: \" + rp.Messages);\r\n                    console.log(\"Exception: \" + rp.Exception);\r\n                }\r\n            }\r\n        );\r\n\r\n    } \r\n     \r\n    render() {\r\n        return (\r\n            <Form\r\n                bloodPressure={this.state.bloodPressure}\r\n                onChange={this.onFieldValueChange}\r\n                onSave={this.onSave}\r\n            />\r\n        );\r\n    }     \r\n     \r\n}"]},"metadata":{},"sourceType":"module"}